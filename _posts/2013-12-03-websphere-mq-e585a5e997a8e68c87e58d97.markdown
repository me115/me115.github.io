---
author: me115wp
comments: true
date: 2013-12-03 11:45:48+00:00
layout: post
link: http://blog.me115.com/2013/12/441
slug: websphere-mq-%e5%85%a5%e9%97%a8%e6%8c%87%e5%8d%97
title: WebSphere  MQ 入门指南
wordpress_id: 441
categories:
- Linux&amp;Unix
tags:
- MQ
- 消息队列
---

WebSphere MQ 入门指南     
这是一篇入门指南。我们从最基本的概念说起；





## 基础概念





对于MQ，我们需要知道4个名词：队列管理器、队列、消息、通道；对于编程设计人员,通常更关心消息和队列,对于维护管理人员,通常 会更关心队列管理器和通道。     
如果我们把队列管理器比作是数据库,那么队列就是其中的一张表,消息就是表中的一条记录。





  
  1.     

队列：我们可以简单地把队列看成一个容器，用于存放消息。

  
   
  2.     

队列管理器：队列管理器构建了独立的 MQ 的运行环境，它是消息队列的管理者，用来维护和管理消息队列。

  
   
  3.     

消息：MQ中的最小对象；默认情况下，消息缺省可以达到 4MB。消息可以分成持久消息和非持久消息。所谓“持久”的 意思,就是在MQ 队列管理器重启动后,消息是否仍然能保持。持久的消息写入或读出队列的同时会在 Log 中记录,所以性能上比非持久消息差不少。

  
   
  4.     

通道：通道则是两个队列管理器之间的一种单向的点对点的通信连接， 消息在通道中只能单向流动。队列管理器之间的通信是通过配置通道来实现 的,通道两侧的队列管理器对这个通道的相关参数应该能对应起来。在通道上可以配置不同的通信协议,这样就使得编程接口与通信协议无关。通道两端的 配置必须匹配,且名字相同,否则无法连通。

  
   
  5.     

RUNMQSC：命令行交互界面管理工具；作为维护人员的我们，与MQ打交道有两种方式，一种是通过MQ提供的二进制命令工具（在mq安装目录的bin目录下），另一种方式则是通过命令行交互管理工具；这二者在功能上有很多是重合的，但并非完全可替代；         
RUNMQSC是一个通用的 MQ 对象管理工具，使用 MQSC命令集可以对 MQ 对象进行          
全方位的管理，也是各种管理方式最直接、最全面的一种。          
RUNMQSC 运行的命令集称为 MQSC (MQ Script Command)"；在 RUNMQSC 中大小写无关,所有的命令会先转换成全大写再提交执行。所以如果要 表示大小相关的字串,比如对象名,则用引号将字串包住。          
输入以下命令启动MQSC命令：runmqsc [queueManagerName]

  




ok，概念介绍完了，下面就是通过示例来学习如何使用他们；     
首先，我们需要创建队列管理，用来存放队列。有了队列管理器后，就可以创建队列；队列创建了，就可以用来放入和取出消息；





## 创建队列管理器





eg：创建一个名为QM_MEMDB的队列管理器：




    
    <code>crtmqm -q QM_MEMDB
    >Directory '/var/mqm/qmgrs/QM_MEMDB' created.</code>





所有创建的队列管理器在/var/mqm/qmgrs目录下都会有对应文件名的子目录生成；
    
（至于为什么是/var/mqm，这个配置在安装目录下的mq配置文件中配置samp/mqs.ini）

    
从这里我们可以确定，队列管理器的创建是一个持久化的操作，当MQ服务器停止后再启动时，队列管理器都还是存在的；





## 启动队列管理器





启动名为QM_MMEDB的队列管理器：




    
    <code>/opt/mqm/bin$./strmqm QM_MEMDB
    >WebSphere MQ queue manager 'QM_MEMDB' started using V7.5.0.0.</code>





（停止mq队列管理器：endmqm）





## 创建队列





队列及消息属于MQ的对象，MQ的对象管理一般使用mqsc命令交互工具来管理；
    
对于创建队列的操作，最好先写好放在一个文件里，然后调用；

    
eg,我们在队列管理器QM_MEMDB中定义一个TEST1队列：




    
    <code>vi define_memdb.tst：
    define qlocal (TEST1) DEFPSIST(YES) MAXDEPTH(150000)</code>





然后调用mqsc来创建：




    
    <code>/var/mqm/sh$runmqsc QM_MEMDB < define_memdb.tst > out.txt</code>





创建的结果信息输出到out.txt:




    
    <code>1 : define qlocal (TEST1) DEFPSIST(YES) MAXDEPTH(150000)
    AMQ8006: WebSphere MQ queue created.
    One MQSC command read.
    No commands have a syntax error.
    All valid MQSC commands were processed.</code>





## 向队列中放入消息





基本队列操作命令分成两类， 一类在 MQ Server 端运行， 它们是 amqsput、 amqsget、
    
amqsbcg。另一类在 MQ Client 端运行，它们是 amqsputc、amqsgetc、amqsbcgc

    
从Server端将消息放入队列的命令格式：




    
    <code>amqsput   amqsput  QueueName [QueueManagerName]  </code>





amqsput和 amqsputc 可以将消息放入队列中， 程序把之后的每一行标准输入作为一条独立的消息，读到 EOF 或空行时退出。注意，UNIX 上的 EOF 为 Ctrl+D。可以将标准输入重定向到文件。队列中每放入一条消息，队列深度增加一。
    
eg：




    
    <code>/var/mqm/sh$amqsput TEST1 QM_MEMDB</code>





## 查看队列中放入的消息





查看队列管理器QM_MEMDB中名为TEST1的队列：




    
    <code>/var/mqm/sh$amqsbcg TEST1 QM_MEMDB</code>





## 从队列中取出消息





amqsget 和 amqsgetc 可以将消息从队列中全部读出并显示。读空后再等待 15 秒，在这段时间内如果有新的消息到达会一并读出。强行中断该程序用 Ctrl+C 。amqsget 和 amqsgetc 执行后队列应该为空，即队列深度为零。





以上是单个服务器的单个队列管理器中完成的操作，如果需要跨队列管理器或跨机通信，我们需要MQ命令服务器和MQ监听器，当然，少不了建立通道；





## MQ命令服务器





WebSphere MQ 命令服务器是队列管理器的一个组件，用来对外来的命令消息进行解释和执行。在远程管理和编程管理的应用中，需要启动命令服务器。一个队列管理器最多只有一个命令服务器，缺省情况下在创建队列管理器时由系统一并创建。
    
启动与停止：

    
strmqcsv

    
endmqcsv

    
dspmqcsv

    
启动后执行下，观察状态，看到正在运行：

    
/opt/mqm/bin$dspmqcsv QM1

    
WebSphere MQ Command Server Status . . : Running





## MQ 监听器





WebSphere MQ 中监听器也是队列管理器的一个组件，用来监听外来的连接请求并相应
    
地做出反应。监听器通常需要先配置，然后才能运行，配置参数与监听器选择的通信协议有关。当然，也可以在第一次启动监听器时将配置参数传入，隐式地进行配置。一个队列管理器可以有多个监听器，分别应用于不同的通信协议或同一协议的不同参数。比如 TCP/IP 的不同端口。





通道的配置和建立下面单独拿出来讲解；
    
over。





## 更多参考





《精通 WebSphere MQ》本书讲解的MQ版本为5.3，有些老，不过操作命令都没有变化；逻辑清晰，还不错；涉及到MQ的新特性，比如发布/订阅方面，就不用看这本书了，转到参考2：
    
《Application Programming Reference MQV7》





Posted by: 大CC | 03DEC,2013
    
博客：[blog.me115.com](http://blog.me115.com)

    
微博：[新浪微博](http://weibo.com/bigcc115)



