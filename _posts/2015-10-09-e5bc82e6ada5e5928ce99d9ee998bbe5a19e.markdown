---
author: me115wp
comments: true
date: 2015-10-09 01:12:15+00:00
layout: post
link: http://blog.me115.com/2015/10/872
slug: '%e5%bc%82%e6%ad%a5%e5%92%8c%e9%9d%9e%e9%98%bb%e5%a1%9e'
title: 异步和非阻塞
wordpress_id: 872
categories:
- Linux&amp;Unix
---

# 异步和非阻塞





今天看了篇知乎讨论，将异步和非阻塞讲的透彻；在这里整理出来；





## 同步异步





同步和异步关注的是 **消息通信机制**      
同步，就是在发出一个 **调用** 时，在没有得到结果之前，该**调用**就不返回。但是一旦调用返回，就得到返回值了。      
换句话说，就是由**调用者**主动等待这个**调用**的结果。





异步则相反，**调用**在发出之后，这个调用就直接返回了，所以没有返回结果。换句话说，当一个异步过程调用发出后，调用者不会立刻得到结果。而是在**调用**发出后，**被调用者**通过状态、通知来通知调用者，或通过回调函数处理这个调用。





## 阻塞与非阻塞





阻塞和非阻塞关注的是 **程序在等待调用结果（消息，返回值）时的状态**.      
阻塞调用是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。      
非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。当然，这就不知道调用是否完成，一般通过轮询定期来探查调用是否完成；





## IO层面的同步异步





在处理IO的时候，阻塞和非阻塞都是同步；如：IO多路复用（select/poll/epoll);     
只有使用了特殊API，才是异步IO，如：linux的AIO、Windows的IOCP .NET的beginInvoke/EndInvoke;      






## 通俗的例子





### 买书





你打电话问书店老板有没有《分布式系统》这本书，如果是同步通信机制，书店老板会说，你稍等，”我查一下"，然后开始查啊查，等查好了（可能是5秒，也可能是一天）告诉你结果（返回结果）。     
而异步通信机制，书店老板直接告诉你我查一下啊，查好了打电话给你，然后直接挂电话了（不返回结果）。然后查好了，他会主动打电话给你。在这里老板通过“回电”这种方式来回调。





你打电话问书店老板有没有《分布式系统》这本书，你如果是阻塞式调用，你会一直把自己“挂起”，直到得到这本书有没有的结果，如果是非阻塞式调用，你不管老板有没有告诉你，你自己先一边去玩了， 当然你也要偶尔过几分钟check一下老板有没有返回结果。     
在这里阻塞与非阻塞与是否同步异步无关。跟老板通过什么方式回答你结果无关。





### 喝茶





另一个有趣的例子：     
老张爱喝茶，废话不说，煮开水。      
出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。      
1 老张把水壶放到火上，立等水开。（同步阻塞）      
老张觉得自己有点傻      
2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）      
老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。      
3 老张把响水壶放到火上，立等水开。（异步阻塞）      
老张觉得这样傻等意义不大      
4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）      
老张觉得自己聪明了。





所谓同步异步，只是对于水壶而言。     
普通水壶，同步；响水壶，异步。      
虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。      
同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。





所谓阻塞非阻塞，仅仅对于老张而言。     
立等的老张，阻塞；看电视的老张，非阻塞。      
情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。





整理自：[http://www.zhihu.com/question/19732473](http://www.zhihu.com/question/19732473)



