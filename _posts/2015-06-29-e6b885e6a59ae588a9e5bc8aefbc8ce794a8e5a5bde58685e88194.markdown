---
author: me115wp
comments: true
date: 2015-06-29 14:56:26+00:00
layout: post
link: http://blog.me115.com/2015/06/857
slug: '%e6%b8%85%e6%a5%9a%e5%88%a9%e5%bc%8a%ef%bc%8c%e7%94%a8%e5%a5%bd%e5%86%85%e8%81%94'
title: 清楚利弊，用好内联
wordpress_id: 857
categories:
- C++编程
tags:
- c++
---

# 清楚利弊，用好内联

 

## 内联的语法

 

  
  1. 在类声明中定义方法； 
   
  2. 内联方法放在类声明之外，但必须出现在头文件中，且内联方法声明中使用inline标识； 
 

注：inline只是对编译器的建议，是否内联的决定权在编译器；

 

## 内联节省的开销

 

  
  1. 函数调用开销 
   
  2. 调用间优化 优秀的编译器可是内联方法的边界难以区分（将代码内联后，对代码进行重新排列） 
 

## 内联带来的问题

 

  
  1. 代码膨胀（空间开销） 
   
  2. 由于代码膨胀带来的页面缓存命中率下降 
   
  3. 编译时间增加 
   
  4. 修改文件后相关文件都需要重新编译； 
   
  5. 由于函数边界模糊，该内联函数遇到问题后不好排查； 
 

## 内联函数的建议

 

优化时，只针对高频代码内联；      
对于调用频率高的（80%以上场景都会走到的路径）：       
函数规模<5行：总是内联；       
5-20行,将高频率的调用点选择性内联；       
超过20行，重写方法，体现出快速路径并将其内联；

 

## 内联的技巧

 

  
  1. 将内联工作放到开发周期后期 
   
  2. 使用条件内联，通过宏和编译选项的技巧控制在开发初期不内联，而到开发后期再加上自定义内联选项进行内联； 
 

## SPARC体系结构中的内联

 

SPARC中有充足的寄存器，在限定的调用深度范围内几乎没有调用返回的性能损失（无须在调用时存储就的寄存器内容），所有，这种体系结构的内联效果甚微，一般不用考虑内联；

 

Posted by: 大CC | 29JUN,2015      
博客：[blog.me115.com](http://blog.me115.com) [[订阅](http://blog.me115.com/feed)]       
Github：[大CC](https://github.com/me115)
