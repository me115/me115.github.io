---
author: me115wp
comments: true
date: 2015-02-06 01:16:22+00:00
layout: post
link: http://blog.me115.com/2015/02/800
slug: const%e5%8f%98%e9%87%8f%e8%b5%8b%e5%80%bc%e6%8a%a5%e9%94%99%e5%88%86%e6%9e%90
title: const变量赋值报错分析
wordpress_id: 800
categories:
- C++编程
---

# const变量赋值报错分析





## const变量赋值报错





从变量到常量的赋值是合法C++的语法约定的，     
如从char 到const char顺畅；      
但从char **到 const char **编译器就会报错：




    
    <code>error: invalid conversion from `char**' to `const char**'</code>





示例：




    
    <code>int main(int argc, char *argv[])
    {
        char a = '1';
        const char b = a;
    
        char * a2 = "12345";
        const char * b2 = a2;
    
        char** a3 = NULL;
    
        //const char** b3 = a3; //error
         char** const c3 = a3; //ok
         char* const * d3 = a3; //ok
    }</code>





原因：
    
const char** b3 说明 b3的指针可以变更，可以再指向另外一个地址；

    
b3和a3都是unqualified的，但b3指向的对象类型为pointer to const char，

    
a3指向的对象类型为 pointer to char，两者是不相容类型，

    
不符合两操作数必须指向相容类型的规定，因此赋值非法。

    
更详细的解释详见参考资料1；





而char** const c3 = a3;正确，则是因为const限制了c3指针的地址变更，即它指向了a3，就不再能变更指向其它指针了；这就限制了指针地址变更可能发生的潜在问题；





当然这时候，使用一个强制类型转换，可以解决这个编译错误：




    
    <code>    const char** b3 = const_cast<const char**>(a3); // ok</code>





但转换后的代码再出现问题就很难排查了；





## 强制类型转换的潜在问题





看以下示例：




    
    <code>class Foo {
    public:
      Foo(){
          i = 1;
      }
      void modify(){// make some modification to the this object
          i = 2;
      }  
      void print() const {
          cout << "Foo_i:" << i << endl;
      }
    private:
      int i;
    };
    
    //演示潜在的危险    
    //error: invalid conversion from `Foo**' to `const Foo**'
    /////////////////////////////////////////////////////////
    int main(int argc, char *argv[])
    {
        const Foo x;
        Foo* p;
    
        //const Foo ** q = &p;  //q now points to p; this is (fortunately!) an error
        const Foo ** q = const_cast<const Foo **>(&p);  
        *q = &x; // p now points to x
        p->modify(); // Ouch: modifies a const Foo!! 
        x.print(); // print: Foo_i:2
        return 0;
    }</code>





我们定义了一个常量的Foo，常量Foo方法打印出来的永远为1；
    
Foo**到const Foo **的转换报错，

    
通过一个强转符让编译通过，

    
最后的x.print()的结果是2;这样的潜在危险在正式的项目代码中就很难发现；

    
很难会想到一个const对象还能够变更；





## 参考资料：






  
  1. 
    

[指针与const](http://blog.csdn.net/code_crash/article/details/4854974)


  


  
  2. 
    

[Why am I getting an error converting a Foo** → Foo const**?](http://www.parashift.com/c++-faq-lite/constptrptr-conversion.html)


  


  
  3. 
    

[Converting Derived_ → Base_ works OK; why doesn't Derived** → Base** work?](http://www.parashift.com/c++-faq-lite/derivedptrptr-to-baseptrptr.html)


  



